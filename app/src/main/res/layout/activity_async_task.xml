<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".Async_task_Act"
    android:orientation="vertical">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/purple_700">

        <ImageView
            android:id="@+id/back"
            android:layout_width="50dp"
            android:layout_height="50dp"
            android:layout_margin="5dp"
            android:padding="10dp"
            android:src="@drawable/back_ic"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:layout_margin="5dp"
            android:text="AsyncTask"
            android:textColor="@color/white"
            android:textSize="25sp"
            android:textStyle="bold" />
    </LinearLayout>



    <androidx.core.widget.NestedScrollView
        xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".Toast_info_Act"
        android:orientation="vertical">


        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="AsyncTasks in Android"
                android:textSize="25sp"
                android:textColor="@color/black"
                android:layout_marginTop="20dp"
                android:layout_marginStart="20dp"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="AsyncTask is an abstract class in Android that offers us the freedom to execute demanding tasks in the background while keeping the UI thread light and the application responsive."
                android:textSize="20sp"
                android:layout_marginTop="20dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>


            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="When launched, an Android application operates in a single thread. "
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Due to this single-thread approach, tasks that take a long time to fetch a response may cause the program to become unresponsive. "
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="We use Android AsyncTask to perform these heavy tasks in the background on a separate thread and return the results back to the UI thread in order to prevent this."
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="As a result, the UI thread is always responsive when AsyncTask is used in an Android application. "
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>


            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="The purpose of AsyncTask"
                android:textSize="25sp"
                android:textColor="@color/black"
                android:layout_marginTop="20dp"
                android:layout_marginStart="20dp"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="The purpose of AsyncTask was to make it possible to use the UI thread correctly and conveniently. "
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>


            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="The most frequent use case, however, was UI integration, which led to Context leaks, missed callbacks, or crashes when settings changed. "
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Additionally, it behaves differently depending on the platform version, swallows exceptions from doInBackground, and offers little benefit over using Executors directly."
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="AsyncTask is not intended to be a general-purpose threading system; rather, it is intended to be a helper class for Thread and Handler."
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="AsyncTasks are best used for brief operations (a few seconds at the most.) It is strongly advised that you use the various APIs offered by the java.util.concurrent package, such as Executor, ThreadPoolExecutor, and FutureTask, if you need to keep threads running for extended periods of time."
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Asynchronous tasks are divided into four Methods :- "
                android:textSize="25sp"
                android:textColor="@color/black"
                android:layout_marginTop="20dp"
                android:layout_marginStart="20dp"/>


            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="1. doInBackground(): "
                android:textColor="@color/black"
                android:textSize="20sp"
                android:layout_marginTop="20dp"
                android:layout_marginStart="20dp"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="The code that has to be run in the background is contained in the doInBackground() method. The publishProgress() method in this method allows us to repeatedly deliver results to the UI thread. We only need to use the return statements to signal that the background processing has been finished."
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>


            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="2. onPreExecute(): "
                android:textColor="@color/black"
                android:textSize="20sp"
                android:layout_marginTop="20dp"
                android:layout_marginStart="20dp"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="The code that runs prior to the beginning of the background processing is contained in this function."
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="3. onPostExecute(): "
                android:textColor="@color/black"
                android:textSize="20sp"
                android:layout_marginTop="20dp"
                android:layout_marginStart="20dp"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="After the doInBackground method has finished processing, the onPostExecute() method is called. This method receives the output of the doInBackground method as its input."
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="4. onProgressUpdate(): "
                android:textColor="@color/black"
                android:textSize="20sp"
                android:layout_marginTop="20dp"
                android:layout_marginStart="20dp"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="This method can use the progress updates it receives from the publishProgress method, which publishes progress updates from the doInBackground function, to update the UI thread."
                android:textSize="20sp"
                android:layout_marginTop="10dp"
                android:layout_marginStart="15dp"
                android:layout_marginEnd="15dp"
                android:textAlignment="center"/>






            <ImageView
                android:id="@+id/img_async"
                android:layout_width="wrap_content"
                android:layout_height="400dp"
                android:padding="20dp"
                android:src="@drawable/asynctask_ex"/>





        </LinearLayout>




    </androidx.core.widget.NestedScrollView>




</LinearLayout>

